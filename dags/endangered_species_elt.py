"""
endangered_species_elt
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
from astro.table import Table, Metadata
import pandas as pd
import pendulum

import pandas as pd

@aql.dataframe(task_id="load_species_status_data")
def load_species_status_data_func():
    return pd.read_csv("https://raw.githubusercontent.com/astronomer/cli-cloud-ide-workshop/main/include/data/country_species_status_cleaned.csv", on_bad_lines='skip', nrows=100)

@aql.run_raw_sql(conn_id="duckdb_default", task_id="species_by_country", results_format="pandas_dataframe")
def species_by_country_func(load_species_status_data: Table):
    return """
    SELECT 
        "iucn",
        "IUCN Category",
        "spec",
        "Species",
        "cou",
        "Country",
        "Value"
    FROM {{ load_species_status_data }};
    """

@aql.dataframe(task_id="transform_endangered_species")
def transform_endangered_species_func(species_by_country: pd.DataFrame):
    all_species = species_by_country
    
    endangered_species = all_species[(all_species['Species']!='Fish') & (all_species['IUCN Category'] == 'Number of critically endangered species')]
    endangered_species_agg = endangered_species[['cou', 'Country', 'Value']].groupby(['cou', 'Country']).sum().reset_index()
    
    endangered_species_agg.rename(
       columns = { 'Value': 'endangered_species' },
       inplace = True  
    )
    
    return endangered_species_agg

@aql.dataframe(task_id="load_terrestrial_protected_area_data")
def load_terrestrial_protected_area_data_func():
    return pd.read_csv("https://raw.githubusercontent.com/astronomer/cli-cloud-ide-workshop/main/include/data/country_terrestrial_protected_area_cleaned.csv", on_bad_lines='skip', nrows=100)

@aql.run_raw_sql(conn_id="duckdb_default", task_id="terrestrial_protected_area", results_format="pandas_dataframe")
def terrestrial_protected_area_func(load_terrestrial_protected_area_data: Table):
    return """
    SELECT
    "cou",
    "Country",
    "Year",
    "Unit",
    "Value"
    FROM {{ load_terrestrial_protected_area_data }};
    """

@aql.dataframe(task_id="transform_tpa")
def transform_tpa_func(terrestrial_protected_area: pd.DataFrame):
    tpa = terrestrial_protected_area
    
    tpa_2021 = tpa[tpa['Year']==2021][['cou', 'Country', 'Year', 'Value']]
    tpa_2021['Value'] = tpa_2021['Value'].round(1)
    
    tpa_2021.rename(
       columns = { 'Value': 'protected_area' },
       inplace = True  
    )
    
    return tpa_2021

@aql.dataframe(task_id="combine_data")
def combine_data_func(transform_endangered_species: pd.DataFrame, transform_tpa: pd.DataFrame):
    return transform_endangered_species.merge(
        transform_tpa,
        how = 'inner',
        on = ['cou', 'Country']
    ).fillna(value = 'NA')

@aql.run_raw_sql(conn_id="duckdb_default", task_id="rank_and_save", results_format="pandas_dataframe")
def rank_and_save_func(combine_data: Table):
    return """
    select * from {{combine_data}}
    order by "endangered_species" desc
    limit 10;
    """

@dag(
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2023-07-07", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
)
def endangered_species_elt():
    load_species_status_data = load_species_status_data_func()

    species_by_country = species_by_country_func(
        load_species_status_data,
    )

    transform_endangered_species = transform_endangered_species_func(
        species_by_country,
    )

    load_terrestrial_protected_area_data = load_terrestrial_protected_area_data_func()

    terrestrial_protected_area = terrestrial_protected_area_func(
        load_terrestrial_protected_area_data,
    )

    transform_tpa = transform_tpa_func(
        terrestrial_protected_area,
    )

    combine_data = combine_data_func(
        transform_endangered_species,
        transform_tpa,
    )

    rank_and_save = rank_and_save_func(
        combine_data,
    )

dag_obj = endangered_species_elt()
